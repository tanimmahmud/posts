{"meta":{"title":"Tanim's blog","subtitle":"Programming blog","description":"Tanim's personal blog about programming","author":"Tanim Mahmud","url":"https://tanimmahmud.github.io/posts"},"pages":[],"posts":[{"title":"Return Specific Fields Only In MongoDB Query","slug":"return-specific-fields-only-in-mongoDB-query","date":"2018-08-29T02:32:36.000Z","updated":"2018-08-29T02:54:44.520Z","comments":true,"path":"2018/08/29/return-specific-fields-only-in-mongoDB-query/","link":"","permalink":"https://tanimmahmud.github.io/posts/2018/08/29/return-specific-fields-only-in-mongoDB-query/","excerpt":"","text":"Sometimes we need to hide specific fields from our database to be returned as json. e.g. password, reported status etc. We can easily do that in MongoDB using following code. 12345678910111213141516171819202122232425262728293031 const threadSchema = new Schema(&#123; board : &#123;type: 'string', required: true&#125;, text : &#123;type: 'string', required: true&#125;, delete_password : &#123;type: 'string', required: true&#125;, created_on : &#123; type: Date, default: Date.now &#125;, bumped_on : &#123; type: Date, default: Date.now &#125;, reported : Boolean, replies : [&#123;text: String,created_on: &#123; type: Date, default: Date.now &#125;, reported: Boolean, delete_password: String&#125;], replycount : Number&#125;)// we need to convert our threadSchema into a Model we can work with. // To do so, we pass it into mongoose.model(modelName, schema):const Thread = mongoose.model('Thread', threadSchema);let board = req.params.boardThread.find(&#123;board: board&#125;&#125;, &#123; reported : 0, delete_password : 0, \"replies.delete_password\" : 0, \"replies.reported\" : 0 &#125;) .then((data) =&gt; &#123; res.json(data); &#125;).catch(err =&gt; next(err)); Here we are hiding reported and delete_password by assigning the value 0. In this case it will return all the other fields except reported and delete_password. If you want to only return one field then assign the value 1 to that field. eg 1&#123;replycount: 1&#125; We can also hide fields from nested array. In that case we have to use 1234567&#123;&quot;array.field&quot;:0&#125;//eg &#123;&quot;replies.delete_password&quot;: 0, &quot;replies.reported&quot;: 0&#125;","categories":[],"tags":[{"name":"MongoDB","slug":"MongoDB","permalink":"https://tanimmahmud.github.io/posts/tags/MongoDB/"},{"name":"Database","slug":"Database","permalink":"https://tanimmahmud.github.io/posts/tags/Database/"},{"name":"Node.js","slug":"Node-js","permalink":"https://tanimmahmud.github.io/posts/tags/Node-js/"},{"name":"Mongoose","slug":"Mongoose","permalink":"https://tanimmahmud.github.io/posts/tags/Mongoose/"},{"name":"Query","slug":"Query","permalink":"https://tanimmahmud.github.io/posts/tags/Query/"},{"name":"Specific Fields","slug":"Specific-Fields","permalink":"https://tanimmahmud.github.io/posts/tags/Specific-Fields/"}]},{"title":"Steps to use Mongoose on your Node.js project","slug":"project","date":"2018-08-28T10:29:24.000Z","updated":"2018-08-28T15:55:25.077Z","comments":true,"path":"2018/08/28/project/","link":"","permalink":"https://tanimmahmud.github.io/posts/2018/08/28/project/","excerpt":"","text":"Createa a mLab account from https://mlab.com/ Create new Database Go inside the Database and ‘Add database user’ Save username and password somewhere save. You will need these for later use. Copy standard MongoDB URI 1mongodb://&lt;dbuser&gt;:&lt;dbpassword&gt;@ds133252.mlab.com:33252/message-board Replace with username and with password. Save this to your .env file 1DB=mongodb://&lt;dbuser&gt;:&lt;dbpassword&gt;@ds133252.mlab.com:33252/message-board Install mongodb and mongoose in you project 12npm install mongodb --savenpm install mongoose --save Require mongoose and connect database with you app using following code 123456789101112131415161718// Require mongoose from mongoose package.const mongoose = require('mongoose');//Database url from .env fileconst url = process.env.DB;// Connect mongoose with urlmongoose.connect(url);const db = mongoose.connection;db.on('error', console.error.bind(console, 'connection error:'));db.once('open', function() &#123; // we're connected! console.log(db.name,'database successfully connected'); //Routing for API apiRoutes(app);&#125;); Unline MongoDB, mongoose need a Model and Schema to store data in your database To create a Model you need to create a Schema first then convert it into a Model we can work with.To do so, we pass it into mongoose.model(modelName, schema) You can create a schema following following code 12345678910111213141516171819202122232425262728// require mongoose and mongoose.Schema const mongoose = require('mongoose');const Schema = mongoose.Schema;// create thread schema// When nesting objects that you define \"inline\", // Mongoose creates schemas for each of those objects behind the scenes.// In our case we will have id for all our replies objectconst threadSchema = new Schema(&#123; board : &#123;type: 'string', required: true, unique: true&#125;, text : &#123;type: 'string', required: true&#125;, delete_password : &#123;type: 'string', required: true&#125;, created_on : &#123; type: Date, default: Date.now &#125;, bumped_on : &#123; type: Date, default: Date.now &#125;, reported : Boolean, replies : [&#123;text: String, reported: Boolean, delete_password: String&#125;],&#125;)// we need to convert our threadSchema into a Model we can work with. // To do so, we pass it into mongoose.model(modelName, schema):const Thread = mongoose.model('Thread', threadSchema);module.exports = Thread; When nesting objects that you define “inline”, Mongoose creates schemas for each of those objects behind the scenes. In our case we will have id for all our replies object. The following code will create a document called ‘threads’ ( because the model called Thread) and insert the post data. 12345678910111213141516171819202122const Thread = require('../models/threadModel');module.exports = function(req,res)&#123; let board = req.body.board; let thread = &#123; board : req.body.board, text : req.body.text, delete_password : req.body.delete_password, created_on : new Date(), bumped_on : new Date(), reported : false, replies : [], &#125; Thread.create(thread) .then((data) =&gt; &#123; res.redirect('/b/'+ board); &#125;).catch(err =&gt; res.send(err));&#125; You can require this to your route and use callback for post.","categories":[],"tags":[{"name":"MongoDB","slug":"MongoDB","permalink":"https://tanimmahmud.github.io/posts/tags/MongoDB/"},{"name":"mLab","slug":"mLab","permalink":"https://tanimmahmud.github.io/posts/tags/mLab/"},{"name":"Database","slug":"Database","permalink":"https://tanimmahmud.github.io/posts/tags/Database/"},{"name":"Node.js","slug":"Node-js","permalink":"https://tanimmahmud.github.io/posts/tags/Node-js/"},{"name":"Mongoose","slug":"Mongoose","permalink":"https://tanimmahmud.github.io/posts/tags/Mongoose/"}]},{"title":"Setup MongoDB with mLab","slug":"mongodb-with-mlab","date":"2018-08-26T14:54:24.000Z","updated":"2018-08-29T07:24:51.840Z","comments":true,"path":"2018/08/27/mongodb-with-mlab/","link":"","permalink":"https://tanimmahmud.github.io/posts/2018/08/27/mongodb-with-mlab/","excerpt":"","text":"Createa a mLab account from https://mlab.com/ Create new Database Go inside the Database and ‘Add database user’ Save username and password somewhere save. You will need these for later use. Copy standard MongoDB URI 1mongodb://&lt;dbuser&gt;:&lt;dbpassword&gt;@ds133252.mlab.com:33252/message-board Replace with username and with password. Save this to your .env file 1DB=mongodb://&lt;dbuser&gt;:&lt;dbpassword&gt;@ds133252.mlab.com:33252/message-board Install mongodb in you project 1npm install mongodb --save Require MongoClient and connect database with you app using following code 12345678910111213141516171819// Require MongoClient from mongodb package.const MongoClient = require('mongodb').MongoClient;//Database url from .env fileconst url = process.env.DB;// Connect MongoClient with urlMongoClient.connect(url, (err,db) =&gt; &#123; if(db)&#123; // get database name from db object console.log(db.s.databaseName,'database successfully connected'); //Routing for API after database successfully connected apiRoutes(app); &#125; else &#123; console.log('database err', err); &#125;&#125;)","categories":[],"tags":[{"name":"MongoDB","slug":"MongoDB","permalink":"https://tanimmahmud.github.io/posts/tags/MongoDB/"},{"name":"mLab","slug":"mLab","permalink":"https://tanimmahmud.github.io/posts/tags/mLab/"},{"name":"Database","slug":"Database","permalink":"https://tanimmahmud.github.io/posts/tags/Database/"}]},{"title":"Update Documents in an Array Using MongoDB","slug":"Update-Documents-in-an-Array","date":"2018-08-26T07:11:20.000Z","updated":"2018-08-29T07:20:57.136Z","comments":true,"path":"2018/08/26/Update-Documents-in-an-Array/","link":"","permalink":"https://tanimmahmud.github.io/posts/2018/08/26/Update-Documents-in-an-Array/","excerpt":"","text":"The positional $ operator facilitates updates to arrays that contain embedded documents. Use the positional $ operator to access the fields in the embedded documents with the dot notation on the $ operator. 123456789101112131415161718192021222324252627const threadSchema = new Schema(&#123; board : &#123;type: 'string', required: true&#125;, text : &#123;type: 'string', required: true&#125;, delete_password : &#123;type: 'string', required: true&#125;, created_on : &#123; type: Date, default: Date.now &#125;, bumped_on : &#123; type: Date, default: Date.now &#125;, reported : Boolean, replies : [&#123;text: String,created_on: &#123; type: Date, default: Date.now &#125;, reported: Boolean, delete_password: String&#125;], replycount : Number&#125;)// we need to convert our threadSchema into a Model we can work with. // To do so, we pass it into mongoose.model(modelName, schema):const Thread = mongoose.model('Thread', threadSchema);let thread_id = req.body.thread_id; let reply_id = req.body.reply_id; Thread.findOneAndUpdate(&#123;_id: thread_id, \"replies._id\": reply_id&#125;, &#123;\"replies.$.reported\": true&#125;) .then((data) =&gt; &#123; if(data)&#123; res.send('success'); &#125; &#125;).catch(err =&gt; console.log(err)); In the above example: We are finding a thread that has _id equal to thread_id and nested replies._id equal to reply_id and updating first reply reported value to true using $ to select the first item.","categories":[],"tags":[{"name":"MongoDB","slug":"MongoDB","permalink":"https://tanimmahmud.github.io/posts/tags/MongoDB/"},{"name":"Database","slug":"Database","permalink":"https://tanimmahmud.github.io/posts/tags/Database/"},{"name":"Update","slug":"Update","permalink":"https://tanimmahmud.github.io/posts/tags/Update/"},{"name":"Node.js","slug":"Node-js","permalink":"https://tanimmahmud.github.io/posts/tags/Node-js/"},{"name":"Mongoose","slug":"Mongoose","permalink":"https://tanimmahmud.github.io/posts/tags/Mongoose/"}]},{"title":"Stepts to follow developing a React app from scratch","slug":"stepts-to-follow-developing-a-react-app-from-scratch","date":"2017-01-01T03:56:41.000Z","updated":"2018-09-03T05:01:56.475Z","comments":true,"path":"2017/01/01/stepts-to-follow-developing-a-react-app-from-scratch/","link":"","permalink":"https://tanimmahmud.github.io/posts/2017/01/01/stepts-to-follow-developing-a-react-app-from-scratch/","excerpt":"","text":"This follows from a handy framework for developing a React app from scratch: Break the app into components Build a static version of the app Determine what should be stateful Determine in which component each piece of state should live 5. Hard-codeinitial states Add inverse data flow Add server communication","categories":[],"tags":[{"name":"React","slug":"React","permalink":"https://tanimmahmud.github.io/posts/tags/React/"}]}]}